/*-------------------------------------------------------------------------------------------------|

    ELEMENTARY

-|------------------------------------------------------------------------------------------------*/
/*-------------------------------------------------------------------------------------------------|
    Fall-Back Start-CSS Settings

    Fall-Back is designed for use with the basic
    [CSS Mustard Cut](https://github.com/Fall-Back/CSS-Mustard-Cut)

    This determines a browser support base of:

    IE 9+, FF 8+, Opera 12, [Chrome 29+, Android ~4.4+]
    Chrome 29+, Opera 16+, Safari 6.1+, iOS 7+, Android ~4.4+


    Any double-classing (e.g. `.class.class`) is deliberate and intended to increase specifity.
    This allows any applicable Start-CSS declarations to be overidden.
    E.g. `.{pattern} .{pattern}__child` would `a[href]`, but just `.{pattern}` wouldn't, so we use
    `.{pattern}.{pattren}`

    https://coolors.co/50514f-f25f5c-ffe066-247ba0-70c1b3

|-------------------------------------------------------------------------------------------------*/
/*-------------------------------------------------------------------------------------------------|
    Fall-Back Start-CSS Functions
|-------------------------------------------------------------------------------------------------*/
/*
    Colour contrast from https://gist.github.com/FStop/8959422
    
    Usage:
    @if f__color_contrast($colour, #fff) < 2 {
        color: #333;
    }
    @else{
        color: #fff;
    }
*/
/* Awesome contrast ratio function
* via https://gist.github.com/voxpelli/6304812
**/
/*-------------------------------------------------------------------------------------------------|
    Fall-Back Start-CSS Mixins
|-------------------------------------------------------------------------------------------------*/
/*
    Apply a border and a padding that offsets the border-width from one spacing unit so as not to
    affect the vertical rhythm.
    Note the Opera Mini doesn't support `calc` so we need to include normal padding for that
    browser.
    Also, since we're supporting FF 8+, we're including -moz-calc for versions up to 16.
    I may consider removing this as those browsers are dead, but I'm just being thorough for now.

    Note on the 'last margin' issue/hack:
    The pseudo element is intended to provide a collapsible margin to cancel out any 'trailing'
    margins from content elements. However, since we're reducing the whole padding space by the
    border-width to maintain the vertical rhythm, that margin is also less, BUT the content margin
    is NOT being reduced, so that wins out - the reduction is ignored.
    If the pseudo element bottom margin is adjusted to cancel out the height (1px) AS WELL AS
    the amount of border-width, but the last element DOES NOT have a margin, then the space becomes
    too small.
    If pseudo-element height is 0, it doesn't work in IE, Chrome, Safari, without inline-block
*/
/*
    This button mixin isn't really meant for generating specific/themed _types_ of button - there
    would be too much code duplication for that.
    Instead, this is intended to create buttons for new/custom selectors.
    For example:

    ```
    [role="button"] {
        @include f__button;
    }
    ```

    rather than:

    ```
        .btn--affirmative {
            @include f__button(<text-color>, <bg-color>);
        }
    ```

    Note - because of this, think about removing parameters (it changed from my original intention -
    I may change it back or split this into 2 mixins, or even just move things that are meant for
    input[type="button"] to that ruleset - actually that's not a bad idea).

*/
/*
    1. Remove the tapping delay from clickable elements.

    Sort out the height of buttons. At 12px spacing, should be 30px high with 3px top/bottom margin.
    Note Edge doesn't like: `line-height: calc(3rem - 2px)` if `display: inline-flex`
    FF8 - ? doesn't like `line-height: -moz-calc()` and ignores
    Need to make sure height is governed by line-height in case of breaks within buttons.
*/
/*
    Uni-directional margins (bottom) is fine for most cases, but things like figcaptions that may
    contain parapgraphs can result in double bottom margins, so flipping that around inside those
    containers.
*/
/*-------------------------------------------------------------------------------------------------|

    ELEMENTARY

|-------------------------------------------------------------------------------------------------*/
/*-------------------------------------------------------------------------------------------------|

    ELEMENTARY SETTINGS

|-------------------------------------------------------------------------------------------------*/
/* NavBar */
/*-------------------------------------------------------------------------------------------------|

    ELEMENTARY MIXINS

|-------------------------------------------------------------------------------------------------*/
/*
    CSS only message
*/
body > div:first-child {
  display: none;
}

/*
    Sticky Footer needs this
*/
html,
body {
  height: 100%;
}

/*
    Note we still need the flexbox for the sticky footer in the event of no Grid support or narrower
    viewports where the Grid isn't applied but the content is still small enough to need the sticky
    footer behavior.
*/
body {
  max-width: 1080px;
  padding: 0;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
}

body > * {
  -webkit-flex: 0 0 auto;
  -ms-flex: 0 0 auto;
  flex: 0 0 auto;
}

/* Grid */
@supports (display: grid) {
  @media only screen and (min-width: 60em) {
    body {
      width: auto;
      -webkit-align-items: stretch;
      -ms-align-items: stretch;
      align-items: stretch;
      display: grid;
      /*grid-template-columns: 1fr fit-content(34%);*/
      grid-template-columns: 3fr 1fr;
      grid-template-rows: max-content auto max-content;
      min-height: 100%;
      height: auto;
    }
    body > header,
    body > footer {
      padding: 1.2rem;
      grid-column: 1 / -1;
    }
    body > main {
      grid-column: 1;
    }
    /*
            Note this is the *template* sidebar - content in a sidebar that appears on all pages.
            Not to be confused with th *content* sidebar, which is specific to the current page
            content.
        /*
        body > aside {
            grid-column: 2;
        }
        
        /*
            If there's no aside (sidebar) then main has to span both columns:
            Note this is fragile and depends on following the Elementary pattern absolutely.
            What it says is that if main is the 3rd from last element, it spans all columns.
            If there are more elements after the `main` element (as in, there's the extra `aside`),
            then the selector won't match.
            
        */
    body > main:nth-last-child(3) {
      grid-column: 1 / -1;
    }
  }
}

/*------------------------------------------------------------------------------------------------*/
/*-------------------------------------------------------------------------------------------------|

    BANNER

|-------------------------------------------------------------------------------------------------*/
/*
    Banner
*/
body > header {
  padding: 1.2rem 1.2rem 0.6rem 1.2rem;
  margin: 0;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-align-items: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-flex-wrap: wrap;
  -ms-flex-wrap: wrap;
  flex-wrap: wrap;
}

body > header > * {
  -webkit-flex: 0 0 auto;
  -ms-flex: 0 0 auto;
  flex: 0 0 auto;
}

/*------------------------------------------------------------------------------------------------*/
/*-------------------------------------------------------------------------------------------------|

    LOGO

|-------------------------------------------------------------------------------------------------*/
body > header > a[href] {
  display: inline-block;
  border: 0;
  padding: 0;
  margin: 0 2.4rem 0.6rem 0;
}

body > header > a[href]:hover,
body > header > a[href]:active,
body > header > a[href]:focus {
  border: 0;
  padding: 0;
  box-shadow: 0 0 0 0.6rem #fff, 0 0 0 1.2rem rgba(0, 0, 0, 0.2);
}

/*-------------------------------------------------------------------------------------------------|

    NAVBAR

|-------------------------------------------------------------------------------------------------*/
body > header > nav {
  margin: 0.6rem 0;
  -webkit-flex: 1 1 auto;
  -ms-flex: 1 1 auto;
  flex: 1 1 auto;
}

body > header > nav > ul {
  margin: 0;
  list-style-type: none;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-wrap: wrap;
  -ms-flex-wrap: wrap;
  flex-wrap: wrap;
}

body > header > nav > ul li {
  margin: 0;
  padding: 0;
  -webkit-flex: 0 0 auto;
  -ms-flex: 0 0 auto;
  flex: 0 0 auto;
}

body > header > nav > ul a[href] {
  display: block;
  margin: 0;
  padding-left: 0.5625em;
  padding-right: 0.5625em;
  padding-bottom: 0;
  padding-top: 0;
  border: 0;
  border-radius: 0;
  line-height: 2.25em;
  text-decoration: none;
  box-shadow: none;
}

body > header > nav > ul a[href] {
  color: #333;
  background-color: transparent;
}

body > header > nav > ul a[href]:hover,
body > header > nav > ul a[href]:active,
body > header > nav > ul a[href] [aria-expanded="true"] {
  color: #333;
  background-color: #cfe9f4;
  border: 0;
}

body > header > nav > ul a[href]:focus {
  color: #333;
  background-color: #081b23;
  border: 0;
  box-shadow: none;
}

/*-------------------------------------------------------------------------------------------------|

    MAIN

|-------------------------------------------------------------------------------------------------*/
/*
    Expand main to sill space - part of stick footer.
*/
body > main {
  min-height: 0;
  -webkit-flex: 1 0 auto;
  -ms-flex: 1 0 auto;
  flex: 1 0 auto;
  max-width: none;
  width: 100%;
  margin: 0;
  padding: 0;
}

/*------------------------------------------------------------------------------------------------*/
/*-------------------------------------------------------------------------------------------------|

    MAIN HEADER

|-------------------------------------------------------------------------------------------------*/
/*
    Page header
    (note may consider qualifying this with `:first-child` but I don't think it's needed)
*/
main > * > header {
  margin: 0;
  padding: 2.4rem;
}

/*
    If there's no main header - give the h1 some room:
    ??Not sure - currently require header?
*
main > * > h1 {
    margin-top: 2.4rem;
}
*/
/*-------------------------------------------------------------------------------------------------|

    BREADCRUMBS

|-------------------------------------------------------------------------------------------------*/
/*-------------------------------------------------------------------------------------------------|

    CONENT

|-------------------------------------------------------------------------------------------------*/
/*
    Content wrapper [A] could be anything (so far `article` or `div`): `main > * >.
    Inside the wrapper there should be `header` (see _1-header.scss).
    After the header we want to give elements some side padding: `~ *`.
*/
main > * > header ~ * {
  padding-left: 2.4rem;
  padding-right: 2.4rem;
}

/*
    If the wrapper [A] is an article, the purpose is longform text [B], so we want that to be easier
    to read, so add `max-width` and center it.
*/
main > article > header ~ * {
  max-width: 80rem;
  margin-left: auto;
  margin-right: auto;
}

/*
    We're using `div` (human semantic "divider") to break out of the `max-width`.
    Use for things like full width images, videos or figures.
*/
main > * > header ~ div {
  max-width: none;
  padding: 0;
}

/*
    If the wrapper [A] is a `div` and the next element after the header is `ul`, we're defining that
    as a list of card-like objects, so we want a gallery-style grid.
    Use for things like portfolio images or article cards.
*/
main > div > header ~ ul {
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-wrap: wrap;
  -ms-flex-wrap: wrap;
  flex-wrap: wrap;
  list-style-type: none;
  /* Gutter */
  margin: -2.4rem 0 0 0;
  padding: 1.2rem;
  /* Centre */
  -ms-flex-pack: center;
  -webkit-justify-content: center;
  justify-content: center;
}

main > div > header:first-child ~ ul > li {
  margin: 0;
  -webkit-flex: 1;
  -ms-flex-positive: 1;
  flex-grow: 1;
  -webkit-flex-shrink: 0;
  -ms-flex-negative: 0;
  flex-shrink: 0;
  /* Size */
  -webkit-flex-basis: 15em;
  -ms-flex-preferred-size: 15em;
  flex-basis: 15em;
  /*
        flex-basis 15em acts like a min-width.
        30em-1px is the point at which there isn't room for 2 items side-by-side
    */
  max-width: calc(30em - 1px);
  /* Gutter */
  margin: 0;
  padding: 1.2rem;
}

/*
    Inline elements
*/
main img {
  width: 100%;
}

/*-------------------------------------------------------------------------------------------------|

    CONTENT SIDEBAR
    Use this for page/content specific content - it should be different on each page and relevant
    or related to the current main content.
    For example:
    * Section menu
    * Related Articles
    * Table of Contents (? may separate this)

|-------------------------------------------------------------------------------------------------*/
/*-------------------------------------------------------------------------------------------------|

    CONTENT FOOTER

|-------------------------------------------------------------------------------------------------*/
/*-------------------------------------------------------------------------------------------------|

    LAYOUT SIDEBAR
    This should be used for site-wide content. I.e. content that doesn't change from page-to-page.
    Examples include:
    * Site-wide navigation if not putting in Banner.#
    * Search
    * Sign-up
    * Donate
    * Featured / Promoted content
    * Ads :-(

|-------------------------------------------------------------------------------------------------*/
body > aside {
  margin: 0;
  padding: 2.4rem;
}

/*-------------------------------------------------------------------------------------------------|

    FOOTER

|-------------------------------------------------------------------------------------------------*/
body > footer {
  margin: 0;
  padding: 1.2rem;
  font-size: 0.875em;
  text-align: center;
}

body > footer > * {
  margin-bottom: 0;
}

/*---*/
/*
    Greybox
*/
body > header,
body > footer {
  background: #ddd;
}

body > aside {
  background: #ccc;
}

main > div > ul > li > a[href] {
  padding: 2.4rem;
  background: #ddd;
  display: block;
}
