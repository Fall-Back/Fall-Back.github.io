/*-------------------------------------------------------------------------------------------------|

    ELEMENTARY

-|------------------------------------------------------------------------------------------------*/
/*-------------------------------------------------------------------------------------------------|
    Fall-Back Start-CSS Settings

    Fall-Back is designed for use with the basic
    [CSS Mustard Cut](https://github.com/Fall-Back/CSS-Mustard-Cut)

    This determines a browser support base of:

    IE 9+, FF 8+, Opera 12, [Chrome 29+, Android ~4.4+]
    Chrome 29+, Opera 16+, Safari 6.1+, iOS 7+, Android ~4.4+


    Any double-classing (e.g. `.class.class`) is deliberate and intended to increase specifity.
    This allows any applicable Start-CSS declarations to be overidden.
    E.g. `.{pattern} .{pattern}__child` would `a[href]`, but just `.{pattern}` wouldn't, so we use
    `.{pattern}.{pattren}`

    https://coolors.co/50514f-f25f5c-ffe066-247ba0-70c1b3

|-------------------------------------------------------------------------------------------------*/
/*-------------------------------------------------------------------------------------------------|
    Fall-Back Start-CSS Functions
|-------------------------------------------------------------------------------------------------*/
/*
    Colour contrast from https://gist.github.com/FStop/8959422

    Usage:
    @if f__color_contrast($colour, #fff) < 2 {
        color: #333;
    }
    @else{
        color: #fff;
    }
*/
/* Awesome contrast ratio function
* via https://gist.github.com/voxpelli/6304812
**/
/*-------------------------------------------------------------------------------------------------|
    Fall-Back Start-CSS Mixins
|-------------------------------------------------------------------------------------------------*/
/*
    Apply a border and a padding that offsets the border-width from one spacing unit so as not to
    affect the vertical rhythm.
    Note the Opera Mini doesn't support `calc` so we need to include normal padding for that
    browser.
    Also, since we're supporting FF 8+, we're including -moz-calc for versions up to 16.
    I may consider removing this as those browsers are dead, but I'm just being thorough for now.

    Note on the 'last margin' issue/hack:
    The pseudo element is intended to provide a collapsible margin to cancel out any 'trailing'
    margins from content elements. However, since we're reducing the whole padding space by the
    border-width to maintain the vertical rhythm, that margin is also less, BUT the content margin
    is NOT being reduced, so that wins out - the reduction is ignored.
    If the pseudo element bottom margin is adjusted to cancel out the height (1px) AS WELL AS
    the amount of border-width, but the last element DOES NOT have a margin, then the space becomes
    too small.
    If pseudo-element height is 0, it doesn't work in IE, Chrome, Safari, without inline-block
*/
/*
    This button mixin isn't really meant for generating specific/themed _types_ of button - there
    would be too much code duplication for that.
    Instead, this is intended to create buttons for new/custom selectors.
    For example:

    ```
    [role="button"] {
        @include f__button;
    }
    ```

    rather than:

    ```
        .btn--affirmative {
            @include f__button(<text-color>, <bg-color>);
        }
    ```

    Note - because of this, think about removing parameters (it changed from my original intention -
    I may change it back or split this into 2 mixins, or even just move things that are meant for
    input[type="button"] to that ruleset - actually that's not a bad idea).

*/
/*
    1. Remove the tapping delay from clickable elements.

    Sort out the height of buttons. At 12px spacing, should be 30px high with 3px top/bottom margin.
    Note Edge doesn't like: `line-height: calc(3rem - 2px)` if `display: inline-flex`
    FF8 - ? doesn't like `line-height: -moz-calc()` and ignores
    Need to make sure height is governed by line-height in case of breaks within buttons.
*/
/*
    Uni-directional margins (bottom) is fine for most cases, but things like figcaptions that may
    contain parapgraphs can result in double bottom margins, so flipping that around inside those
    containers.
*/
/*-------------------------------------------------------------------------------------------------|

    ELEMENTARY

    Expected structure for core Elementary to work:

    <html>
    <head>
        ...
    </head>
    <body>
        <hidden elements like svg and css-only message>
        <header>
        <main>
        ?<aside> [1]
        <footer>
        ?<script> [1]
    </body>
    </html>

    NOTES
    -----

    1.  These elements are optional, and there could be more than one <script> element, but the
        MAIN POSITION SELECTOR (below) needs to be altered via the $main_position_selector variable
        so that it takes into account the number of elements invoked.
        Note that the way this works accounts for there *sometimes* being an aside present or not
        (so if it's not there the selector matches the main element and makes it span both columns).


|-------------------------------------------------------------------------------------------------*/
/*-------------------------------------------------------------------------------------------------|

    ELEMENTARY SETTINGS

|-------------------------------------------------------------------------------------------------*/
/* NavBar */
/*-------------------------------------------------------------------------------------------------|

    ELEMENTARY MIXINS

|-------------------------------------------------------------------------------------------------*/
/*-------------------------------------------------------------------------------------------------|

    ELEMENTARY SELECTORS
    ====================
    
    Elementary relies solely on context and relative DOM position. This is why it should only be
    for 'light' projects, where there isn't much variety and patterns can be closely adhered to.
    
    With that in mind, if the conventions are learned, there is some flexibility in the system,
    particularly in regards to the extract DOM elements that are used, so long as any changes to 
    the selectors below are carefully considered so as not to introduce conflicts.
    
    
    Conventions
    -----------

    DIV
        DIV's are semantically meaningless/neutral as far as AT is concerned, but since 'div' is
        short for DIVIDER it makes logical sense to the HTML author that it is a division of content
        and thus is appropriate for situations where content may need to be visually separated from
        it's surroundings.
        
    Specificity
    -----------
    
    Some of the selectors may look overly specific, but it's really important in such a fragile
    system to be as specific as possible; to really say exactly what we mean.
    For example, on a Listing page when writing the selector we could could say:
    "Any `ul` that is a direct child of the inner wrapper should be a Gallery"
    This would be `div > ul`. However, we use `div > header ~ ul` because what we really mean to say
    is "Any `ul` AFTER the `header`", because if there was a list BEFORE the `header` for some
    reason, it will not need to be a Gallery.

|-------------------------------------------------------------------------------------------------*/
/*
    This container shows a message is CSS is unavailable. It is normally the first element on the
    page after the SVG Icons.
    
    ```
    <body>
        <svg ... />
        <div>
            [CSS message]
        </div>
        ...
    </body>
    ```
*/
/*
    The page is broken into sections: BANNER, MAIN, SIDEBAR (optional) and FOOTER.
    
    ```
    <body>
        ...
        <header/>
        <main/>
        ?<aside/>?
        <footer>
        ...
    </body>
    ```
    
    BANNER
        A fairly typical page banner where you'd expect to find a logo, primary navigation,
        search, and maybe Calls to Action.
    MAIN
        The main content of the page. This may be one of several types (more on that later);
        those types are patterns in their own right and should be declared with their own
        unique markup.
    ASIDE
        An optional sidebar. It con be omitted on all or only some pages and the layout should 
        retain it's integrity. This means the DOM is quite fragile and sensitive to change so be 
        careful. More on that later.
    FOOTER
        This is a typical page footer and would contain the usual Copyright notice and key links
        etc.
*/
/*
    BANNER > LOGO
    -------------
    
    This is the pattern needed to match the logo <a> in the banner.
    
    ```
        <header>
            <a/>
            ...
        </header>
    ```
*/
/*
    BANNER > NAVBAR
    ---------------
    
    This is the pattern needed to match primary navigation. The links are expected to be in an
    unordered list.
    
    ```
    <header>
        ...
        <nav>
            <ul>
                <li>
                    <a/>
                </li>
                ...
            </ul>
        </nav>
    </header>
    ```
*/
/*------------------------------------------------------------------------------------------------*/
/*
    MAIN
    ----
    
    The MAIN area is both a semantic landmark and a content wrapper.
    The MAIN pattern expects there to be *another* wrapper immediately inside it. What this wrapper
    is determines how the content inside that is handled. In other words the markup chosen for this
    internal wrapper should be appropriate to the rest of the content.
    This choice determines the PAGE TYPE.
    
    ELEMENTARY attempts to provide common PAGE TYPES - PAGE TYPES can display any content, of
    course, but the layout, focus and functionality of each TYPE is quite different.
    
    PAGE TYPES
    
    Article
        This pattern should use `<article>` as the inner wrapper and should be used for pages where
        longform text is the primary focus of the page. E.g. a Blog Post or Documentation Page.
        
    Listing
        This pattern should use a `<div>` as the inner wrapper (since no other semantic element is
        more appropriate) and is primarily intended as a Gallery Page. This could be a grid of 
        cards or images, for example. It's possible to use this pattern for arbitrary markup, but
        all `<ul>`s that are direct children of the inner `<div>` will be displayed as a gallery.
        
    More?...
*/
/*
    MAIN > HEADER
    -------------
*/
/*
    CSS only message
*/
body > div:first-of-type {
  display: none;
}

/*
    Sticky Footer needs this
*/
html,
body {
  height: 100%;
}

/*
    Note we still need the flexbox for the sticky footer in the event of no Grid support or narrower
    viewports where the Grid isn't applied but the content is still small enough to need the sticky
    footer behavior.
*/
body {
  max-width: 1080px;
  padding: 0;
  display: flex;
  flex-direction: column;
}

body > * {
  flex: 0 0 auto;
}

/* Grid */
@supports (display: grid) {
  @media only screen and (min-width: 50em) {
    body {
      width: auto;
      align-items: stretch;
      display: grid;
      /*grid-template-columns: 1fr fit-content(34%);*/
      grid-template-columns: 3fr 1fr;
      grid-template-rows: max-content auto max-content;
      min-height: 100%;
      height: auto;
    }
    body > header,
    body > footer {
      padding: 1.2rem;
      grid-column: 1 / -1;
    }
    body > main {
      grid-column: 1;
    }
    /*
            Note this is the *template* sidebar - content in a sidebar that appears on all pages.
            Not to be confused with the *content* sidebar, which is specific to the current page
            content.
        /*
        body > aside {
            grid-column: 2;
        }

        /*
            MAIN POSITION SELECTOR

            If there's no aside (sidebar) then main has to span both columns:
            Note this is fragile and depends on following the Elementary pattern absolutely.
            What it says is that if main is the X from last element, it spans all columns.
            If there are more elements after the `main` element (as in, there's the extra `aside`),
            then the selector won't match. Change this in local SCSS and be wary of adding or
            removing elements via JS.

        */
    body > main:nth-last-child(3) {
      grid-column: 1 / -1;
    }
  }
}

/*------------------------------------------------------------------------------------------------*/
/*-------------------------------------------------------------------------------------------------|

    BANNER

|-------------------------------------------------------------------------------------------------*/
/*
    Banner
*/
body > header {
  padding: 1.2rem 1.2rem 0.6rem 1.2rem;
  margin: 0;
  display: flex;
  align-items: center;
  flex-wrap: wrap;
}

body > header > * {
  flex: 0 0 auto;
}

/*------------------------------------------------------------------------------------------------*/
/*-------------------------------------------------------------------------------------------------|

    LOGO

|-------------------------------------------------------------------------------------------------*/
body > header > a[href] {
  display: inline-block;
  border: 0;
  padding: 0;
  margin: 0 2.4rem 0.6rem 0;
}

body > header > a[href]:hover,
body > header > a[href]:active,
body > header > a[href]:focus {
  border: 0;
  padding: 0;
  box-shadow: 0 0 0 0.6rem #fff, 0 0 0 1.2rem rgba(0, 0, 0, 0.2);
}

/*-------------------------------------------------------------------------------------------------|

    NAVBAR

|-------------------------------------------------------------------------------------------------*/
body > header > nav {
  margin: 0.6rem 0;
  flex: 1 1 auto;
}

body > header > nav > ul {
  margin: 0;
  list-style-type: none;
  display: flex;
  flex-wrap: wrap;
}

body > header > nav > ul li {
  margin: 0;
  padding: 0;
  flex: 0 0 auto;
}

body > header > nav > ul a[href] {
  display: block;
  margin: 0;
  padding-left: 0.5625em;
  padding-right: 0.5625em;
  padding-bottom: 0;
  padding-top: 0;
  border: 0;
  border-radius: 0;
  line-height: 2.25em;
  text-decoration: none;
  box-shadow: none;
}

body > header > nav > ul a[href] {
  color: #333;
  background-color: transparent;
}

body > header > nav > ul a[href]:hover,
body > header > nav > ul a[href]:active,
body > header > nav > ul a[href] [aria-expanded="true"] {
  color: #333;
  background-color: #cfe9f4;
  border: 0;
}

body > header > nav > ul a[href]:focus {
  color: #333;
  background-color: #081b23;
  border: 0;
  box-shadow: none;
}

/*-------------------------------------------------------------------------------------------------|

    MAIN

|-------------------------------------------------------------------------------------------------*/
/*
    Expand main to sill space - part of stick footer.
*/
body > main {
  min-height: 0;
  flex: 1 0 auto;
  max-width: none;
  width: 100%;
  margin: 0;
  padding: 0;
}

/*------------------------------------------------------------------------------------------------*/
/*-------------------------------------------------------------------------------------------------|

    MAIN HEADER

|-------------------------------------------------------------------------------------------------*/
/*
    Page header
    (note may consider qualifying this with `:first-child` but I don't think it's needed)
*/
body > main > * > header {
  margin: 0;
  padding: 2.4rem;
}

/*
    If there's no main header - give the h1 some room:
    ??Not sure - currently require header?
*
main > * > h1 {
    margin-top: 2.4rem;
}
*/
/*-------------------------------------------------------------------------------------------------|

    BREADCRUMBS

|-------------------------------------------------------------------------------------------------*/
/*-------------------------------------------------------------------------------------------------|

    CONTENT

    ```
    <main> <!-- OUTER WRAPPER -->
        <?> <!-- INNER WRAPPER [A] e.g. article or div -->
            <header>
                <h1>...</h1>
                ?...?
            </header>
        </?>
    </main>
    ```

|-------------------------------------------------------------------------------------------------*/
/*
    Content wrapper [A] could be anything (so far `article` or `div`): `body > main > * >.
    Inside the wrapper there should be `header` (see _1-header.scss).
    After the header} we want to give elements some side padding: `~ *`.
*/
body > main > * > header ~ * {
  padding-left: 2.4rem;
  padding-right: 2.4rem;
}

/*
    If the wrapper [A] is an article, the purpose is longform text [PAGE TYPE Article], so we want
    that to be easier to read, so add `max-width` and center it.

    1. Some items from StartCSS are `display: table` for other fixes. Because of that they're
       intrinsically sized so may not appear full width, and therefore look odd, so expand them.

*/
body > main > article > header ~ * {
  width: 100%;
  /* 1 */
  max-width: 70rem;
  margin-left: auto;
  margin-right: auto;
}

/*
    We're using `div` (human semantic "divider") to break out of the `max-width`.
    Use for things like full width images, videos or figures.
*/
body > main > * > header ~ div {
  max-width: none;
  padding: 0;
}

/*
    If the wrapper [A] is a `div` [PAGE TYPE Listing] we're saying we want `ul`s to be a
    gallery-style grid list of card-like object.
    Use for things like portfolio images or article cards.
*/
/*
    Inline elements
*/
body > main img {
  width: 100%;
}

/*
    What should be the default behaviour for this?
    
    I mean, you'll want to choose the behaviour based on use case and number of items.
    
    I've covered this before, and there are different 'classes' of behaviour to consider:
    
    1. **Gallery Grid**. KNOW/UNKNOWN QUANTITY (doesn't matter) Use CSS Grid for this. 
       USES: (Where the are more than X items ?), the items need to be given equal weighting, they 
       should appear as a list (so uneven trailing items are left-aligned and do not expand to the 
       fill the bottom row). VARIABLE/UNDETERMINED quantity. E.g People/PRU People, SHEER badge 
       list.

    2. **Selected Balanced Display**. KNOWN QUANTITY. Items should be considered a 'Display' and
       should be balanced properly. The correct display pattern class should be applied depending on
       the quantity and behaviour required. E.g footer logo lists (if number changes, change the 
       class - the number isn't ever unknown). KNOWN card lists, e.g. PRU (7, weighted bottom) / 
       Contact Cards (6, 1x6, 2x3, 3x2)

    3. **Auto Balanced Display**. UNKNOWN QUANTITY. This is the trickiest, and will ALWAYS have the 
       potential to be broken. E.g. News cards - we KNOW it's 6 or less so we can account for that
       using QQ's etc, but there's nothing to stop an unknowing admin changing this to something
       like 20. If the max assumed quantity for the pattern is, say 16, then 20 is outside,
       so the behaviour is undefined. This is SO unlikely though
*/
body > main > div > header ~ ul {
  list-style-type: none;
  display: flex;
  flex-wrap: wrap;
  padding: 0.5rem;
}

body > main > div > header ~ ul > * {
  margin: 0.5rem;
  flex-shrink: 0;
  flex-grow: 1;
  flex-basis: 15rem;
  background-color: #ccc;
}

body > main > div > header ~ ul > * > * {
  display: block;
  height: 100%;
}

/*
@supports (width: unquote("max(1px, 1px)")) {
    body > main > div > header ~ ul {
        
    }

    body > main > div > header ~ ul > * {
        flex-basis: unquote("max(50% - 1rem, (var(--bp1) - 100%) * 999)");
    }


    body > main > div > header ~ ul > :nth-last-child(odd):first-child {
        flex-basis: 100%;
    }
}
*/
/*

*/
@supports (display: grid) {
  body > main > div > header ~ ul {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(15rem, 1fr));
    grid-gap: 1rem;
    padding: 1rem;
  }
  body > main > div > header ~ ul > * {
    margin: 0;
  }
}

/*-------------------------------------------------------------------------------------------------|

    CONTENT SIDEBAR
    Use this for page/content specific content - it should be different on each page and relevant
    or related to the current main content.
    For example:
    * Section menu
    * Related Articles
    * Table of Contents (? may separate this)

|-------------------------------------------------------------------------------------------------*/
/*-------------------------------------------------------------------------------------------------|

    CONTENT FOOTER

|-------------------------------------------------------------------------------------------------*/
/*-------------------------------------------------------------------------------------------------|

    LAYOUT SIDEBAR
    This should be used for site-wide content. I.e. content that doesn't change from page-to-page.
    Examples include:
    * Site-wide navigation if not putting in Banner.#
    * Search
    * Sign-up
    * Donate
    * Featured / Promoted content
    * Ads :-(

|-------------------------------------------------------------------------------------------------*/
body > aside {
  margin: 0;
  padding: 2.4rem;
}

/*-------------------------------------------------------------------------------------------------|

    FOOTER

|-------------------------------------------------------------------------------------------------*/
body > footer {
  margin: 0;
  padding: 1.2rem;
  font-size: 0.875em;
  text-align: center;
}

body > footer > * {
  margin-bottom: 0;
}

/*---*/
/*
    Greybox
*/
body > header,
body > footer {
  background: #ddd;
}

body > aside {
  background: #ccc;
}

main > div > ul > li > a[href] {
  padding: 2.4rem;
  background: #ddd;
  display: block;
}
